# extern llvm.va_start(i8*) : void
# extern llvm.va_end(i8*) : void
# extern llvm.va_copy(i8*, i8*) : void

# extern llvm.memcpy.p0i8.p0i8.i32(i8*,  i8*, i32, i32, bool) : void
# extern llvm.memcpy.p0i8.p0i8.i64(i8*, i8*, i64, i32, bool) : void
# extern llvm.memmove.p0i8.p0i8.i32(i8*, i8*, i32, i32, bool) : void
# extern llvm.memmove.p0i8.p0i8.i64(i8*, i8*, i64, i32, bool) : void
# extern llvm.memset.p0i8.i32(i8*, i8, i32, i32, bool) : void
# extern llvm.memset.p0i8.i64(i8*, i8, i64, i32, bool) : void

# extern @llvm.memset.element.unordered.atomic.p0i8.i32(i8*, i8, i32, i32) : void
# extern @llvm.memset.element.unordered.atomic.p0i8.i64(i8*, i8, i64, i32) : void

extern llvm.sqrt.f32(f32) : f32
extern llvm.powi.f32(f32, i32) : f32
extern llvm.sin.f32(f32) : f32
extern llvm.cos.f32(f32) : f32
extern llvm.pow.f32(f32, f32) : f32
extern llvm.exp.f32(f32) : f32
extern llvm.exp2.f32(f32) : f32
extern llvm.log.f32(f32) : f32
extern llvm.log10.f32(f32) : f32
extern llvm.log2.f32(f32) : f32
extern llvm.fma.f32(f32, f32, z : f32) : f32
extern llvm.fabs.f32(f32) : f32
extern llvm.minnum.f32(f32, f32) : f32
extern llvm.maxnum.f32(f32, f32) : f32
extern llvm.copysign.f32(f32, f32) : f32
extern llvm.floor.f32(f32) : f32
extern llvm.ceil.f32(f32) : f32
extern llvm.trunc.f32(f32) : f32
extern llvm.rint.f32(f32) : f32
extern llvm.nearbyint.f32(f32) : f32
extern llvm.round.f32(f32) : f32
extern llvm.canonicalize.f32(f32) : f32
extern llvm.fmuladd.f32(f32, f32, f32) : f32

extern llvm.sqrt.f64(f64) : f64
extern llvm.powi.f64(f64, i32) : f64
extern llvm.sin.f64(f64) : f64
extern llvm.cos.f64(f64) : f64
extern llvm.pow.f64(f64, f64) : f64
extern llvm.exp.f64(f64) : f64
extern llvm.exp2.f64(f64) : f64
extern llvm.log.f64(f64) : f64
extern llvm.log10.f64(f64) : f64
extern llvm.log2.f64(f64) : f64
extern llvm.fma.f64(f64, f64, z : f64) : f64
extern llvm.fabs.f64(f64) : f64
extern llvm.minnum.f64(f64, f64) : f64
extern llvm.maxnum.f64(f64, f64) : f64
extern llvm.copysign.f64(f64, f64) : f64
extern llvm.floor.f64(f64) : f64
extern llvm.ceil.f64(f64) : f64
extern llvm.trunc.f64(f64) : f64
extern llvm.rint.f64(f64) : f64
extern llvm.nearbyint.f64(f64) : f64
extern llvm.round.f64(f64) : f64
extern llvm.canonicalize.f64(f64) : f64
extern llvm.fmuladd.f64(f64, f64, f64) : f64

extern llvm.bitreverse.i8(i8) : i8
extern llvm.bswap.i8(i8) : i8
extern llvm.ctpop.i8(i8) : i8
extern llvm.ctlz.i8(i8) : i8
extern llvm.cttz.i8(i8) : i8
# extern llvm.sadd.with.overflow.i8(i8, i8) : {i8, bool}
# extern llvm.uadd.with.overflow.i8(i8, i8) : {i8, bool}
# extern llvm.ssub.with.overflow.i8(i8, i8) : {i8, bool}
# extern llvm.usub.with.overflow.i8(i8, i8) : {i8, bool}
# extern llvm.smul.with.overflow.i8(i8, i8) : {i8, bool}
# extern llvm.umul.with.overflow.i8(i8, i8) : {i8, bool}

extern llvm.bitreverse.i16(i16) : i16
extern llvm.bswap.i16(i16) : i16
extern llvm.ctpop.i16(i16) : i16
extern llvm.ctlz.i16(i16) : i16
extern llvm.cttz.i16(i16) : i16
# extern llvm.sadd.with.overflow.i16(i16, i16) : {i16, bool}
# extern llvm.uadd.with.overflow.i16(i16, i16) : {i16, bool}
# extern llvm.ssub.with.overflow.i16(i16, i16) : {i16, bool}
# extern llvm.usub.with.overflow.i16(i16, i16) : {i16, bool}
# extern llvm.smul.with.overflow.i16(i16, i16) : {i16, bool}
# extern llvm.umul.with.overflow.i16(i16, i16) : {i16, bool}

extern llvm.bitreverse.i32(i32) : i32
extern llvm.bswap.i32(i32) : i32
extern llvm.ctpop.i32(i32) : i32
extern llvm.ctlz.i32(i32) : i32
extern llvm.cttz.i32(i32) : i32
# extern llvm.sadd.with.overflow.i32(i32, i32) : {i32, bool}
# extern llvm.uadd.with.overflow.i32(i32, i32) : {i32, bool}
# extern llvm.ssub.with.overflow.i32(i32, i32) : {i32, bool}
# extern llvm.usub.with.overflow.i32(i32, i32) : {i32, bool}
# extern llvm.smul.with.overflow.i32(i32, i32) : {i32, bool}
# extern llvm.umul.with.overflow.i32(i32, i32) : {i32, bool}

extern llvm.bitreverse.i64(i64) : i64
extern llvm.bswap.i64(i64) : i64
extern llvm.ctpop.i64(i64) : i64
extern llvm.ctlz.i64(i64) : i64
extern llvm.cttz.i64(i64) : i64
# extern llvm.sadd.with.overflow.i64(i64, i64) : {i64, bool}
# extern llvm.uadd.with.overflow.i64(i64, i64) : {i64, bool}
# extern llvm.ssub.with.overflow.i64(i64, i64) : {i64, bool}
# extern llvm.usub.with.overflow.i64(i64, i64) : {i64, bool}
# extern llvm.smul.with.overflow.i64(i64, i64) : {i64, bool}
# extern llvm.umul.with.overflow.i64(i64, i64) : {i64, bool}

extern llvm.bitreverse.i128(i128) : i128
extern llvm.bswap.i128(i128) : i128
extern llvm.ctpop.i128(i128) : i128
extern llvm.ctlz.i128(i128) : i128
extern llvm.cttz.i128(i128) : i128
# extern llvm.sadd.with.overflow.i128(i128, i128) : {i128, bool}
# extern llvm.uadd.with.overflow.i128(i128, i128) : {i128, bool}
# extern llvm.ssub.with.overflow.i128(i128, i128) : {i128, bool}
# extern llvm.usub.with.overflow.i128(i128, i128) : {i128, bool}
# extern llvm.smul.with.overflow.i128(i128, i128) : {i128, bool}
# extern llvm.umul.with.overflow.i128(i128, i128) : {i128, bool}
