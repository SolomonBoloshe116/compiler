#[primitive]
struct f64
  # INFINITY = 1_f64 / 0
  # MIN_NORMAL = 2.2250738585072014e-308_f64  # 2.0**-1022
  # MIN = 4.9e-324_f64                        # 2.0**-1074
  # MAX = 1.7976931348623157e308_f64          # (2.0 - 2**-52) * 2**1023
  # NaN = 0_f64 / 0
  # SIZE = 64

  #[primitive]
  def to_i8 : i8
  end

  #[primitive]
  def to_u8 : u8
  end

  #[primitive]
  def to_i16 : i16
  end

  #[primitive]
  def to_u16 : u16
  end

  #[primitive]
  def to_i32 : i32
  end

  #[primitive]
  def to_u32 : u32
  end

  #[primitive]
  def to_i64 : i64
  end

  #[primitive]
  def to_u64 : u64
  end

  #[primitive]
  #[feature(i128)]
  def to_i128 : i128
  end

  #[primitive]
  #[feature(i128)]
  def to_u128 : u128
  end

  #[primitive]
  def to_f32 : f32
  end

  #[inline]
  def to_f64 : f64
    self
  end

  #[inline]
  def to_i : i32
    self.to_i32
  end

  #[inline]
  def to_u : u32
    self.to_u32
  end

  #[inline]
  def to_f : f64
    self.to_f64
  end
  #[inline]
  #[inline]
  #[inline]

  #[primitive]
  def +(other : f64) : f64
  end

  #[primitive]
  def -(other : f64) : f64
  end

  #[primitive]
  def *(other : f64) : f64
  end

  #[primitive]
  def /(other : f64) : f64
  end

  #[primitive]
  def %(other : f64) : f64
  end

  #[primitive]
  def **(other : f64) : f64
  end

  #[inline]
  def abs : f64
    if self < 0
      -self
    else
      self
    end
  end

  #[primitive]
  def floor : f64
  end

  #[primitive]
  def ceil : f64
  end

  #[primitive]
  def truncate : f64
  end

  #[inline]
  def //(other : f64) : f64
    q = (self / other).truncate()
    r = self % other
    if r < 0
      if other > 0
        q - 1
      else
        q + 1
      end
    else
      q
    end
  end

  #[inline]
  def %%(other : f64) : f64
    result = self % other
    if result < 0
      result + other.abs()
    else
      result
    end
  end

  #[primitive]
  def ==(other : f64) : bool
  end

  #[primitive]
  def !=(other : f64) : bool
  end

  #[primitive]
  def <(other : f64) : bool
  end

  #[primitive]
  def <=(other : f64) : bool
  end

  #[primitive]
  def >(other : f64) : bool
  end

  #[primitive]
  def >=(other : f64) : bool
  end

  #[inline]
  def <=>(other : f64) : i32
    if self < other
      -1
    elsif self > other
      1
    else
      0
    end
  end

  ##[primitive]
  #def - : f64
  #end

  ##[primitive]
  #def + : f64
  #end

  #[inline]
  def ! : bool
    false
  end
end
