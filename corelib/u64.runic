#[primitive]
struct u64
  # MIN = 0_u64
  # MAX = 18446744073709551615_u64
  # SIZE = 64

  #[primitive]
  def to_i8 : i8
  end

  #[primitive]
  def to_u8 : u8
  end

  #[primitive]
  def to_i16 : i16
  end

  #[primitive]
  def to_u16 : u16
  end

  #[primitive]
  def to_i32 : i32
  end

  #[primitive]
  def to_u32 : u32
  end

  #[primitive]
  def to_i64 : i64
  end

  #[inline]
  def to_u64 : u64
    self
  end

  #[primitive]
  #[feature(i128)]
  def to_i128 : i128
  end

  #[primitive]
  #[feature(i128)]
  def to_u128 : u128
  end

  #[primitive]
  def to_f32 : f32
  end

  #[primitive]
  def to_f64 : f64
  end

  #[inline]
  def to_i : i32
    self.to_i32
  end

  #[inline]
  def to_u : u32
    self.to_u32
  end

  #[inline]
  def to_f : f64
    self.to_f64
  end

  #[primitive]
  def +(other : u64) : u64
  end

  #[primitive]
  def -(other : u64) : u64
  end

  #[primitive]
  def *(other : u64) : u64
  end

  #[primitive]
  def div(other : u64) : u64
  end

  #[primitive]
  def %(other : u64) : u64
  end

  #[inline]
  def /(other : u64) : float
    self.to_f / other.to_f
  end

  #[inline]
  def abs : u64
    self
  end

  #[inline]
  def //(other : u64) : u64
    self.div(other)
  end

  #[inline]
  def %%(other : u64) : u64
    self % other
  end

  #[inline]
  def **(exponent : u64) : u64
    x = self
    result = 1_u64

    until exponent == 0_u64
      unless (exponent & 1_u64) == 0_u64
        result *= x
        exponent -= 1_u64
      end

      x *= x
      exponent >>= 1_u64
    end

    result
  end

  #[primitive]
  def ==(other : u64) : bool
  end

  #[primitive]
  def !=(other : u64) : bool
  end

  #[primitive]
  def <(other : u64) : bool
  end

  #[primitive]
  def <=(other : u64) : bool
  end

  #[primitive]
  def >(other : u64) : bool
  end

  #[primitive]
  def >=(other : u64) : bool
  end

  #[inline]
  def <=>(other : u64) : i32
    if self < other
      -1
    else
      if self > other
        1
      else
        0
      end
    end
  end

  #[primitive]
  def ~ : u64
  end

  #[inline]
  def ! : bool
    false
  end

  #[primitive]
  def &(other : u64) : u64
  end

  #[primitive]
  def |(other : u64) : u64
  end

  #[primitive]
  def ^(other : u64) : u64
  end

  #[primitive]
  def <<(other : u64) : u64
  end

  #[primitive]
  def >>(other : u64) : u64
  end
end
